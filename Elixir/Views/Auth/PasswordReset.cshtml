@model Elixir.Models.ResetPassword
@{
    Layout = "~/Views/Shared/_LayoutPublic.cshtml";
    ViewBag.Title = "Password Reset";
}

@section Scripts
{
    @Scripts.Render("~/Scripts/App/leaveDirtyForm.js")
    <script>
        $("#hidePassword").click(function () {
            var isChecked = $(this).is(":checked");
            var inpPassword = document.getElementById("NewPassword");
            if (inpPassword.type === "password")
              {
                inpPassword.type = "text";
              } else {
                inpPassword.type = "password";
              }

        });
    </script>
}

@section Styles
{
    @Styles.Render("~/Styles/Components/Controls/Inputs.css")
}

<h1 class="head-title">Password Reset</h1>

@if (TempData["ResetPassVerificationFailedMsg"] != null)
{
    <div class="alert alert-danger">
        @TempData["ResetPassVerificationFailedMsg"].ToString()
    </div>
}
else if (TempData["ResetPassVerificationSuccessMsg"] != null)
{
    <div class="alert alert-success">
        @TempData["ResetPassVerificationSuccessMsg"].ToString()
    </div>
}
else
{
    using (Html.BeginForm("PasswordReset", "Auth", FormMethod.Post))
    {
        @Html.ValidationSummary(true)
        <div class="form-group row">
            <div class="col-6">
                @Html.LabelFor(x => x.EmailAddress, "Email address", new { @class = "col-form-label" })
                @Html.EditorFor(x => x.EmailAddress, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(x => x.EmailAddress)
            </div>
        </div>
        <div class="form-group row">
            <div class="col-6">
                @Html.LabelFor(x => x.NewPassword, "New Password", new { @class = "col-form-label" })
                <p>8-50 characters (must include one uppercase, one lowercase and one digit)</p>
                @*@Html.EditorFor(x => x.NewPassword, new { htmlAttributes = new { @type = "text", @class = "form-control", @autofocus = "" } })*@
                @Html.EditorFor(x => x.NewPassword, new { htmlAttributes = new { @type = "text", @class = "form-control", @autofocus = "" } })
                <div style="text-align: right;" class="mt-3"><input type="checkbox" id="hidePassword" name="hidePassword" /> <label for="hidePassword">Hide Password</label></div>
                @Html.ValidationMessageFor(x => x.NewPassword)
            </div>
        </div>
        @Html.HiddenFor(x => x.UrlEmailAddress)
        @Html.HiddenFor(x => x.UrlSecurityCode)
        <div class="form-group row">
            <div class="col-6">
                <input type="submit" id="btnReset" class="btn btn-primary" value="Reset" />
            </div>
        </div>
    }
}